#!/usr/bin/make -f

MOZ_APP_BASENAME	:= firefox
CHANNEL			:= release
MOZ_MOZDIR		:=

# Various build options
# 1 = Use bundled libs
MOZ_MIN_SYSDEPS		?= 1
# 1 = Enable crashreporter (if supported)
MOZ_ENABLE_BREAKPAD	?= 1
# 1 = Disable official branding and crash reporter (the crash reporter builds but is not enabled in application.ini)
MOZ_BUILD_UNOFFICIAL	?= 0
# 1 = Build without jemalloc suitable for valgrind debugging
MOZ_VALGRIND		?= 0
# 1 = Profile guided build
MOZ_BUILD_PGO		?= 0
# 1 = Build and run the testsuite
MOZ_WANT_UNIT_TESTS	?= 1
# 1 = Turn on debugging bits and disable optimizations
MOZ_DEBUG		?= 0
# 1 = Disable optimizations
MOZ_NO_OPTIMIZE		?= 0

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_HOST_ARCH			?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
DEB_HOST_GNU_CPU		?= $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
# Other things which should be defined before including the CDBS rules
DEB_TAR_SRCDIR			:= mozilla
DEB_DH_STRIP_ARGS		= --dbg-package=$(MOZ_APP_NAME)-dbg
# We don't want build-tree/mozilla/README to be shipped as a doc
DEB_INSTALL_DOCS_ALL 		:= $(NULL)
# Needed for mozclient
MOZCLIENT_PROJECTNAME		:= $(MOZ_APP_BASENAME)
MOZCLIENT_PROJECTDIR		:= $(CURDIR)/debian/mozclient

ifneq (,$(findstring nocheck,$(DEB_BUILD_OPTIONS)))
	MOZ_WANT_UNIT_TESTS=0
endif

-include /usr/share/cdbs/1/rules/tarball.mk
-include /usr/share/cdbs/1/rules/debhelper.mk
-include /usr/share/cdbs/1/rules/patchsys-quilt.mk
-include /usr/share/cdbs/1/class/makefile.mk
include $(CURDIR)/debian/mozclient/$(MOZ_APP_BASENAME).mk

MOZ_OBJDIR		:= $(DEB_BUILDDIR)/$(MOZ_MOZDIR)/obj-$(DEB_HOST_GNU_TYPE)
MOZ_DISTDIR		:= $(MOZ_OBJDIR)/$(MOZ_MOZDIR)/dist

ifeq (1,$(MOZ_VALGRIND))
	MOZ_BUILD_UNOFFICIAL = 1
endif

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	MOZ_BUILD_PGO = 0
	MOZ_NO_OPTIMIZE = 1
endif

ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
	MOZ_NO_OPTIMIZE = 1
	MOZ_DEBUG = 1
	MOZ_BUILD_UNOFFICIAL = 1
endif

ifeq (1, $(MOZ_BUILD_PGO))
	# See https://bugzilla.mozilla.org/show_bug.cgi?id=602245
	MOZ_WANT_UNIT_TESTS = 0
	# We don't really want the crash reporter on for PGO builds yet
	MOZ_ENABLE_BREAKPAD = 0
	MOZ_BUILD_UNOFFICIAL = 1
endif

include $(CURDIR)/debian/testsuite.mk

# Define other variables used throughout the build
MOZ_APP_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
MOZ_APP_NAME_SUFFIX	:= $(shell echo $(MOZ_APP_NAME) | sed 's/\($(MOZ_APP_BASENAME)\)\-*\(.*\)/\2/' )

DEB_MAKE_MAKEFILE		:= client.mk

# Without this, CDBS passes CFLAGS and CXXFLAGS options to client.mk, which breaks the build
DEB_MAKE_EXTRA_ARGS		:=

# These normally come from autotools.mk, which we no longer include (because we
# don't want to run configure)
ifeq (1, $(MOZ_BUILD_PGO))
	DEB_MAKE_BUILD_TARGET	:= profiledbuild
endif
DEB_MAKE_INSTALL_TARGET		:= install DESTDIR=$(CURDIR)/debian/tmp
DEB_MAKE_CLEAN_TARGET		:= distclean

MOZ_VERSION			= $(shell cat $(DEB_BUILDDIR)/browser/config/version.txt)
MOZ_PREFIX			:= /usr
MOZ_LIBDIR			= $(MOZ_PREFIX)/lib/$(MOZ_APP_NAME)-$(MOZ_VERSION)
MOZ_INCDIR			= $(MOZ_PREFIX)/include/$(MOZ_APP_NAME)-$(MOZ_VERSION)
MOZ_IDLDIR			= $(MOZ_PREFIX)/share/idl/$(MOZ_APP_NAME)-$(MOZ_VERSION)
MOZ_SDKDIR			= $(MOZ_PREFIX)/lib/$(MOZ_APP_NAME)-devel-$(MOZ_VERSION)
MOZ_SERIES			= $(shell echo $(MOZ_VERSION) | sed -e 's/pre//; s/[ab].*//' | cut -d '.' -f 1,2)

NSPR_DEPENDS		:= $(NULL)
NSS_DEPENDS		:= $(NULL)
CAIRO_DEPENDS		:= $(NULL)
DEB_DH_GENCONTROL_ARGS	= -- -Vnspr:Depends=$(NSPR_DEPENDS) -Vnss:Depends=$(NSS_DEPENDS) -Vcairo:Depends=$(CAIRO_DEPENDS)
DEB_AUTO_UPDATE_DEBIAN_CONTROL	= no

MOZ_PYTHON		:= $(shell which python)
DISTRIB 		:= $(shell lsb_release -i -s)

ifneq (,$(filter $(DISTRIB),Ubuntu))
	DISTRIB_VERSION_MAJOR := $(shell lsb_release -s -r | cut -d '.' -f 1)
	DISTRIB_VERSION_MINOR := $(shell lsb_release -s -r | cut -d '.' -f 2)
endif

ifneq ($(MOZ_APP_NAME),$(MOZ_APP_BASENAME))
	# We don't want to make builds which change MOZ_APP_NAME official
	MOZ_BUILD_UNOFFICIAL = 1
endif

# enable the crash reporter only on i386, amd64 and armel
ifeq (,$(filter i386 amd64 armel,$(DEB_HOST_ARCH)))
	MOZ_ENABLE_BREAKPAD = 0
endif

BRANDING	= $(CHANNEL)
ifneq (,$(filter release beta, $(BRANDING)))
	BRANDING = official
endif
ifeq (1,$(MOZ_BUILD_UNOFFICIAL))
ifneq (,$(filter official aurora, $(BRANDING)))
	BRANDING = unofficial
endif
endif
ifeq (official,$(BRANDING))
	MOZ_BRANDING_OPTION = --enable-official-branding
else
	MOZ_BRANDING_OPTION = --with-branding=$(BRANDING_DIR)
endif
BRANDING_DIR		= browser/branding/$(BRANDING)
MOZ_DISPLAY_NAME	= $(shell cat $(DEB_BUILDDIR)/$(BRANDING_DIR)/locales/en-US/brand.properties \
			    | grep brandShortName | sed -e 's/brandShortName\=//')

ifeq (nightly,$(CHANNEL))
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -lt "1104" && echo "1"))
	# Disable crashreporter on nightly builds older than Natty
	MOZ_ENABLE_BREAKPAD = 0
endif
endif

CFLAGS		= -g
CXXFLAGS	= -g

LDFLAGS = $(shell echo $$LDFLAGS | sed -e 's/-Wl,-Bsymbolic-functions//')
export LDFLAGS
export DEB_BUILD_HARDENING=1
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
	MOZ_ENABLE_GLOBALMENU := 1
endif
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1010" && echo "1"))
	MOZ_SYSTEM_DICTDIR = /usr/share/hunspell
else
	MOZ_SYSTEM_DICTDIR = /usr/share/myspell/dicts
endif
export MOZCONFIG=$(CURDIR)/debian/mozconfig
ifneq (1,$(MOZ_BUILD_UNOFFICIAL))
	export BUILD_OFFICIAL=1
endif
ifeq (1,$(MOZ_ENABLE_BREAKPAD))
	# Needed to enable crashreported in application.ini
	export MOZILLA_OFFICIAL=1
endif
ifeq (1,$(MOZ_BUILD_PGO))
	CC	= $(shell which gcc-4.5)
	CXX	= $(shell which g++-4.5)
	export CC
	export CXX
endif

ifneq (1, $(MOZ_MIN_SYSDEPS))
ifneq (1, $(MOZ_DEBUG))
	MOZ_USE_SYSTEM_NSPR := $(shell pkg-config --exists 'nspr >= 4.8.7'; a=$$?; if test $$a != 1; then echo 1; fi)
	MOZ_USE_SYSTEM_CAIRO := $(shell pkg-config --exists 'cairo >= 1.8.8'; a=$$?; if test $$a != 1; then echo 1; fi)
	MOZ_USE_SYSTEM_SQLITE :=  $(shell pkg-config --exists 'sqlite3 >= 3.7.1'; a=$$?; if test $$a != 1; then echo 1; fi)
	MOZ_USE_SYSTEM_NSS := $(shell pkg-config --exists 'nss >= 3.12.9'; a=$$?; if test $$a != 1; then echo 1; fi)
	MOZ_USE_SYSTEM_HUNSPELL := $(shell pkg-config --exists 'hunspell >= 1.2' && echo 1)
ifeq (1, $(MOZ_USE_SYSTEM_CAIRO))
	MOZ_USE_SYSTEM_CAIRO := $(shell printf "\#include <cairo-tee.h>\nint main(int argc, char *argv[]) { return 0; }" > test.c && \
			      gcc `pkg-config --cflags --libs cairo` -lc -o test test.c > /dev/null 2>&1 && echo "1"; rm -f test test.c)
endif
endif
endif

# Defines used for the Mozilla text preprocessor
DEB_DEFINES = 	-DMOZ_LIBDIR="$(MOZ_LIBDIR)" -DMOZ_APP_NAME="$(MOZ_APP_NAME)" -DMOZ_SERIES="$(MOZ_SERIES)" -DMOZ_APP_BASENAME="$(MOZ_APP_BASENAME)"\
		-DMOZ_INCDIR="$(MOZ_INCDIR)" -DMOZ_IDLDIR="$(MOZ_IDLDIR)" -DMOZ_VERSION="$(MOZ_VERSION)" -DDEB_HOST_ARCH="$(DEB_HOST_ARCH)" \
		-DMOZ_DISPLAY_NAME="$(MOZ_DISPLAY_NAME)" -DMOZ_SYSTEM_DICTDIR="$(MOZ_SYSTEM_DICTDIR)" \
		-DMOZ_BRANDING_OPTION="$(MOZ_BRANDING_OPTION)" -DTOPSRCDIR="$(CURDIR)" -DDEB_HOST_GNU_TYPE="$(DEB_HOST_GNU_TYPE)" \
		-DMOZ_PREFIX="$(MOZ_PREFIX)" -DMOZ_SDKDIR="$(MOZ_SDKDIR)" -DMOZ_DISTDIR="$(MOZ_DISTDIR)" \
		-DMOZ_OBJDIR="$(MOZ_OBJDIR)" -DDEB_BUILDDIR="$(DEB_BUILDDIR)" -DMOZ_PYTHON="$(MOZ_PYTHON)" -DMOZ_PROFILE_PREFIX=".mozilla/"
ifeq (1, $(MOZ_MIN_SYSDEPS))
	DEB_DEFINES += -DMOZ_MIN_SYSDEPS
endif
ifeq (1, $(MOZ_ENABLE_BREAKPAD))
	DEB_DEFINES += -DMOZ_ENABLE_BREAKPAD
endif
ifeq (1, $(MOZ_VALGRIND))
	DEB_DEFINES += -DMOZ_VALGRIND
endif
ifeq (1,$(MOZ_NO_OPTIMIZE))
	DEB_DEFINES += -DMOZ_NO_OPTIMIZE
endif
ifeq (1, $(MOZ_USE_SYSTEM_NSPR))
	DEB_DEFINES += -DMOZ_USE_SYSTEM_NSPR
	NSPR_DEPENDS = libnspr4-dev
endif
ifeq (1, $(MOZ_USE_SYSTEM_CAIRO))
	DEB_DEFINES += -DMOZ_USE_SYSTEM_CAIRO
	CAIRO_DEPENDS = libcairo2-dev
endif
ifeq (1, $(MOZ_USE_SYSTEM_SQLITE))
	DEB_DEFINES += -DMOZ_USE_SYSTEM_SQLITE
endif
ifeq (1, $(MOZ_USE_SYSTEM_NSS))
	DEB_DEFINES += -DMOZ_USE_SYSTEM_NSS
	NSS_DEPENDS = libnss3-dev
endif
ifeq (1,$(MOZ_USE_SYSTEM_HUNSPELL))
	DEB_DEFINES += -DMOZ_USE_SYSTEM_HUNSPELL
endif
ifeq (1,$(MOZ_WANT_UNIT_TESTS))
	DEB_DEFINES += -DMOZ_WANT_UNIT_TESTS
endif
ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
	DEB_DEFINES += -DDEB_BUILD_GNU_TYPE="$(DEB_BUILD_GNU_TYPE)"
endif
ifeq (1,$(MOZ_BUILD_PGO))
	DEB_DEFINES += -DMOZ_BUILD_PGO
endif
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
	DEB_DEFINES += -DMOZ_DISABLE_GNOMEVFS
	DEB_DEFINES += -DMOZ_DISABLE_CONTROL_CENTER
endif
ifneq (,$(filter aurora beta, $(CHANNEL)))
	DEB_DEFINES += -DMOZ_UPDATE_CHANNEL="$(CHANNEL)"
endif
ifeq (1,$(MOZ_DEBUG))
	DEB_DEFINES += -DMOZ_DEBUG
endif
ifneq (,$(findstring armel,$(DEB_HOST_ARCH)))
	DEB_DEFINES += -DDEB_ENABLE_THUMB2
endif
ifeq (1,$(MOZ_ENABLE_GLOBALMENU))
	DEB_DEFINES += -DMOZ_ENABLE_GLOBALMENU
endif
ifeq (official, $(BRANDING))
	DEB_DEFINES += -DMOZ_OFFICIAL_BRANDING
endif
ifneq ($(MOZ_APP_NAME),$(MOZ_APP_BASENAME))
	DEB_DEFINES += -DMOZ_APP_RENAME
endif

DEBIAN_EXECUTABLES = $(MOZ_APP_NAME)$(MOZ_LIBDIR)/firefox.sh \
		     $(NULL)

subst_files = \
	debian/usr.bin.$(MOZ_APP_NAME) \
	debian/README.Debian \
	debian/firefox.sh \
	debian/apport/blacklist \
	debian/apport/native-origins \
	debian/apport/$(MOZ_APP_NAME).py \
	debian/$(MOZ_APP_NAME).desktop \
	debian/$(MOZ_APP_NAME).xml \
	debian/$(MOZ_APP_NAME)-gnome-support.install \
	debian/$(MOZ_APP_NAME).dirs \
	debian/$(MOZ_APP_NAME).install \
	debian/$(MOZ_APP_NAME).links \
	debian/$(MOZ_APP_NAME).manpages \
	debian/$(MOZ_APP_NAME).menu \
	debian/$(MOZ_APP_NAME).postinst \
	debian/$(MOZ_APP_NAME).postrm \
	debian/$(MOZ_APP_NAME).preinst \
	debian/$(MOZ_APP_NAME).prerm \
	debian/$(MOZ_APP_NAME).1 \
	debian/$(MOZ_APP_NAME)-mozsymbols.install \
	debian/$(MOZ_APP_NAME)-dev.install \
	debian/$(MOZ_APP_NAME)-dev.links \
	debian/$(MOZ_APP_NAME).lintian-overrides \
	debian/$(MOZ_APP_NAME)-globalmenu.dirs \
	debian/mozconfig \
	$(NULL)

pkgconfig_files = \
	debian/pkgconfig/mozilla-plugin.pc \
	debian/pkgconfig/libxul.pc \
	debian/pkgconfig/mozilla-nspr.pc \
	$(NULL)

ifneq (1, $(MOZ_MIN_SYSDEPS))
EXTRA_BD = \n\tlibnspr4-dev,\n\tlibnss3-dev,\n\tlibcairo2-dev,\n\tlibsqlite3-dev,\n\tlibpixman-1-dev,\n\tlibjpeg62-dev,\n\tlibpng12-dev,\n\tzlib1g-dev,\n\tlibhunspell-dev,
else
EXTRA_BD = $(NULL)
endif

debian/control:: debian/control.in debian/control.langpacks debian/control.langpacks.unavail debian/locales.shipped debian/locales.unavailable
	mv debian/control debian/control.old
	sed -e 's/@EXTRA_BD@/$(EXTRA_BD)/g' \
	    -e 's/@MOZ_APP_NAME@/$(MOZ_APP_NAME)/g' < debian/control.in > debian/control

	while read line ; \
	do \
		line=`echo $$line | sed 's/#.*//' | sed '/^$$/d'` ; \
		if [ ! -z "$$line" ] ; \
		then \
			language=`echo $$line | sed 's/\([^:]*\):*\([^:]*\):*\([^:]*\)/\2/'` ; \
			desc=`echo $$line | sed 's/\([^:]*\):*\([^:]*\):*\([^:]*\)/\3/'` ; \
			tmp=`echo $$language | sed 's/\-/_/'` ; \
			eval b=\$$$$tmp ; \
			if [ -z $$b ] ; \
			then \
				sed -e "s/@LANGCODE@/$$language/g" \
				    -e "s/@LANG@/$$desc/g" \
				    -e 's/@MOZ_APP_NAME@/$(MOZ_APP_NAME)/g' < debian/control.langpacks >> debian/control ; \
				eval $$tmp=1 ; \
			fi \
		fi \
	done < debian/locales.shipped

	while read line ; \
	do \
		line=`echo $$line | sed 's/#.*//' | sed '/^$$/d'` ; \
		if [ ! -z "$$line" ] ; \
		then \
			language=`echo $$line | sed 's/\([^:]*\):*\([^:]*\)/\1/'` ; \
			sed -e "s/@LANGCODE@/$$language/g" \
			    -e 's/@MOZ_APP_NAME@/$(MOZ_APP_NAME)/g' < debian/control.langpacks.unavail >> debian/control ; \
		fi \
	done < debian/locales.unavailable ; \

	if ! cmp -s debian/control debian/control.old ; \
	then \
		echo "debian/control file is out of date" ; \
		rm debian/control.old ; \
		exit 1 ; \
	fi
	rm debian/control.old

BRANCH	:=
ifneq (,$(MOZ_APP_NAME_SUFFIX))
	BRANCH = -$(MOZ_APP_NAME_SUFFIX)
endif
$(subst_files): $(foreach file, $(subst_files), $(subst $(BRANCH),,$(file).in))
	$(MOZ_PYTHON) $(DEB_BUILDDIR)/$(MOZ_MOZDIR)/config/Preprocessor.py -Fsubstitution --marker="%%" $(DEB_DEFINES) $(CURDIR)/$(subst $(BRANCH),,$@.in) > $(CURDIR)/$@

%.pc: WCHAR_CFLAGS = $(shell cat $(MOZ_OBJDIR)/config/autoconf.mk | grep WCHAR_CFLAGS | sed 's/^[^=]*=[[:space:]]*\(.*\)$$/\1/')
%.pc: %.pc.in debian/stamp-makefile-build
	$(MOZ_PYTHON) $(DEB_BUILDDIR)/$(MOZ_MOZDIR)/config/Preprocessor.py -Fsubstitution --marker="%%" $(DEB_DEFINES) -DWCHAR_CFLAGS="$(WCHAR_CFLAGS)" $(CURDIR)/$< > $(CURDIR)/$@

%.pc: WCHAR_CFLAGS = $(shell cat $(MOZ_OBJDIR)/config/autoconf.mk | grep WCHAR_CFLAGS | sed 's/^[^=]*=[[:space:]]*\(.*\)$$/\1/')
%.pc: %.pc.in debian/stamp-makefile-build
	$(MOZ_PYTHON) $(DEB_BUILDDIR)/$(MOZ_MOZDIR)/config/Preprocessor.py -Fsubstitution --marker="%%" $(DEB_DEFINES) -DWCHAR_CFLAGS="$(WCHAR_CFLAGS)" $(CURDIR)/$< > $(CURDIR)/$@

debian/usr.bin.firefox.in:
	if [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1104' ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.11.04 $(CURDIR)/debian/usr.bin.firefox.in ; \
	elif [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1010' ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.10 $(CURDIR)/debian/usr.bin.firefox.in ; \
	elif [ "$(DISTRIB_VERSION_MAJOR)" -ge "10" ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.04 $(CURDIR)/debian/usr.bin.firefox.in ; \
	else \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.9.10 $(CURDIR)/debian/usr.bin.firefox.in ; \
	fi

debian/stamp-buildsymbols: debian/stamp-makefile-build
ifeq (1, $(MOZ_ENABLE_BREAKPAD))
	# create build symbols
	cd $(MOZ_OBJDIR); \
	        $(MAKE) buildsymbols MOZ_SYMBOLS_EXTRA_BUILDID=$(shell date -d "`dpkg-parsechangelog | grep Date: | sed -e 's/^Date: //'`" +%y%m%d%H%M%S)-$(DEB_HOST_GNU_CPU)
endif
	touch $@

compare-locales/scripts/compare-locales:
	cp -r $(CURDIR)/debian/compare-locales $(CURDIR)
	chmod +x $(CURDIR)/compare-locales/scripts/*

debian/stamp-langpack-xpi-build: compare-locales/scripts/compare-locales
	rm -rf $(CURDIR)/debian/l10n-mergedirs
	mkdir $(CURDIR)/debian/l10n-mergedirs

	export PATH=$(CURDIR)/compare-locales/scripts/:$$PATH ; \
	export PYTHONPATH=$(CURDIR)/compare-locales/lib ; \
	cd $(MOZ_OBJDIR)/browser/locales ; \
	while read line ; \
	do \
		line=`echo $$line | sed 's/#.*//' | sed '/^$$/d'` ; \
		if [ ! -z "$$line" ] ; \
		then \
			language=`echo $$line | sed 's/\([^:]*\):*\([^:]*\):*\([^:]*\)/\1/'` ; \
			$(MAKE) merge-$$language LOCALE_MERGEDIR=$(CURDIR)/debian/l10n-mergedirs/$$language ; \
			$(MAKE) langpack-$$language LOCALE_MERGEDIR=$(CURDIR)/debian/l10n-mergedirs/$$language ; \
		fi \
	done < $(CURDIR)/debian/locales.shipped

	touch $@

common-build-arch:: debian/stamp-testsuite $(pkgconfig_files)

common-build-indep:: debian/stamp-langpack-xpi-build

common-binary-arch:: debian/stamp-buildsymbols

common-binary-post-install-indep::
	while read line ; \
	do \
		line=`echo $$line | sed 's/#.*//' | sed '/^$$/d'` ; \
		if [ ! -z "$$line" ] ; \
		then \
			language=`echo $$line | sed 's/\([^:]*\):*\([^:]*\):*\([^:]*\)/\1/'` ; \
			pkgname=`echo $$line | sed 's/\([^:]*\):*\([^:]*\):*\([^:]*\)/\2/'` ; \
			id=`python $(CURDIR)/debian/get-xpi-id.py $(CURDIR)/$(MOZ_DISTDIR)/linux-$(DEB_HOST_GNU_CPU)/xpi/$(MOZ_APP_NAME)-$(MOZ_VERSION).$${language}.langpack.xpi` ; \
			dh_installdirs -p$(MOZ_APP_NAME)-locale-$${pkgname} usr/lib/$(MOZ_APP_NAME)-addons/extensions ; \
			cp $(CURDIR)/$(MOZ_DISTDIR)/linux-$(DEB_HOST_GNU_CPU)/xpi/$(MOZ_APP_NAME)-$(MOZ_VERSION).$${language}.langpack.xpi \
			  $(CURDIR)/debian/$(MOZ_APP_NAME)-locale-$${pkgname}/usr/lib/$(MOZ_APP_NAME)-addons/extensions/$${id}.xpi ; \
			dh_installdirs -p$(MOZ_APP_NAME)-locale-$${pkgname} usr/lib/$(MOZ_APP_NAME)-addons/searchplugins/$${language} ; \
			cp -r $(CURDIR)/$(MOZ_DISTDIR)/xpi-stage/locale-$${language}/searchplugins/*.xml \
			  $(CURDIR)/debian/$(MOZ_APP_NAME)-locale-$${pkgname}/usr/lib/$(MOZ_APP_NAME)-addons/searchplugins/$${language}/. ; \
		fi \
	done < $(CURDIR)/debian/locales.shipped

binary-install/$(MOZ_APP_NAME)::
	convert -resize 32x32 debian/$(MOZ_APP_NAME)/usr/share/pixmaps/$(MOZ_APP_NAME).png debian/$(MOZ_APP_NAME)/usr/share/pixmaps/$(MOZ_APP_NAME).xpm
ifeq (1,$(MOZ_ENABLE_BREAKPAD))
	install -m 0644 $(CURDIR)/debian/apport/blacklist $(CURDIR)/debian/$(MOZ_APP_NAME)/etc/apport/blacklist.d/$(MOZ_APP_NAME)
endif
	install -m 0644 $(CURDIR)/debian/apport/native-origins $(CURDIR)/debian/$(MOZ_APP_NAME)/etc/apport/native-origins.d/$(MOZ_APP_NAME)

ifeq (1, $(MOZ_ENABLE_GLOBALMENU))
binary-install/$(MOZ_APP_NAME)-globalmenu::
	unzip -o -d debian/$(MOZ_APP_NAME)-globalmenu$(MOZ_PREFIX)/lib/$(MOZ_APP_NAME)-addons/extensions/globalmenu@ubuntu.com/ $(MOZ_DISTDIR)/xpi-stage/globalmenu.xpi
	find debian/$(MOZ_APP_NAME)-globalmenu$(MOZ_PREFIX)/lib/$(MOZ_APP_NAME)-addons/extensions/globalmenu@ubuntu.com/ -type f -executable | xargs chmod -x
endif

GNOME_SUPPORT_FILES = libmozgnome.so libnkgnomevfs.so

binary-post-install/$(MOZ_APP_NAME):: compare
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -fv debian/$(MOZ_APP_NAME)/usr/lib/firefox-*/components/$(file);) true
# XXX: Would be nice to not do this here, but the preprocessor only supports basic comparison operators for equality
	if [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1110' ] ; then \
		mv $(CURDIR)/debian/$(MOZ_APP_NAME)$(MOZ_LIBDIR)/distribution $(CURDIR)/debian/$(MOZ_APP_NAME)$(MOZ_PREFIX)/lib/$(MOZ_APP_NAME)-addons/ ; \
		dh_link -p$(MOZ_APP_NAME) $(MOZ_PREFIX)/lib/$(MOZ_APP_NAME)-addons/distribution $(MOZ_LIBDIR)/distribution ; \
	fi

ifneq (1, $(MOZ_USE_SYSTEM_NSPR))
binary-post-install/$(MOZ_APP_NAME)-dev::
	rm -f debian/$(MOZ_APP_NAME)-dev$(MOZ_INCDIR)/nspr/md/_linux.cfg
	dh_link -p$(MOZ_APP_NAME)-dev $(MOZ_INCDIR)/nspr/prcpucfg.h $(MOZ_INCDIR)/nspr/md/_linux.cfg
endif

common-binary-predeb-arch::
	$(foreach file,$(DEBIAN_EXECUTABLES),chmod a+x debian/$(file);)
	# we want the gnome dependencies not to be in the main package at shlibdeps runtime, hence we dont
	# install them at binary-install/* stage, but copy them over _after_ the shlibdeps had been generated
	$(foreach file,$(GNOME_SUPPORT_FILES),mv debian/$(MOZ_APP_NAME)-gnome-support$(MOZ_LIBDIR)/components/$(file) debian/$(MOZ_APP_NAME)$(MOZ_LIBDIR)/components/;) true
	touch $@

ifneq (1, $(MOZ_USE_SYSTEM_NSS))
binary-predeb/$(MOZ_APP_NAME)::
	$(foreach lib,libsoftokn3.so libfreebl3.so libnssdbm3.so, \
	        LD_LIBRARY_PATH=debian/$(MOZ_APP_NAME)$(MOZ_LIBDIR):$$LD_LIBRARY_PATH \
	        $(MOZ_DISTDIR)/bin/shlibsign -v -i debian/$(MOZ_APP_NAME)$(MOZ_LIBDIR)/$(lib);)
endif

pre-build:: $(subst_files)

	# KDE integration
	cp $(DEB_SRCDIR)/toolkit/content/widgets/dialog.xml $(DEB_SRCDIR)/toolkit/content/widgets/dialog-kde.xml
	cp $(DEB_SRCDIR)/toolkit/content/widgets/preferences.xml $(DEB_SRCDIR)/toolkit/content/widgets/preferences-kde.xml
	cp $(DEB_SRCDIR)/browser/base/content/browser.xul $(DEB_SRCDIR)/browser/base/content/browser-kde.xul
	mkdir -p $(DEB_SRCDIR)/extensions/globalmenu
	(cd debian/globalmenu && tar -cvhf - .) | (cd $(DEB_SRCDIR)/extensions/globalmenu && tar -xf -) 

get-compare-locales:
	mkdir -p compare-locales-tmp
	hg clone http://hg.mozilla.org/build/compare-locales compare-locales-tmp
ifdef HGTAG
	cd compare-locales-tmp; \
		hg update $(HGTAG); \
		printf "TAG=%s" $(HGTAG) > REV
else
	cd compare-locales-tmp; \
		CHANGESET=`hg summary | grep parent | cut -d ' ' -f 2 | cut -d : -f 2`; \
		printf "CHANGESET=%s" $$CHANGESET > REV
endif
	cd  compare-locales-tmp; \
		find . -name *.pyc | xargs rm -f; \
		rm -rf .hg .hgtags .hgignore tests *.py
	rm -rf debian/compare-locales
	mv compare-locales-tmp debian/compare-locales

refresh-supported-locales: pre-build
ifdef LANGPACK_O_MATIC
	perl debian/refresh-supported-locales.pl -s $(CURDIR)/$(DEB_BUILDDIR)/browser/locales/shipped-locales -l $(LANGPACK_O_MATIC)
else
	perl debian/refresh-supported-locales.pl -s $(CURDIR)/$(DEB_BUILDDIR)/browser/locales/shipped-locales
endif

clean::
	rm -f $(subst_files)
	rm -f debian/usr.bin.firefox.in
	rm -f debian/stamp-*
	rm -rf debian/l10n-mergedirs
	rm -rf compare-locales

Description: We introduce a new preference that allows users to set a preferred
 plugin for a given mime-type.

 For example:

  pref ("modules.plugins.mimetype.application/x-shockwave-flash", "/usr/lib/firefox-3.0.1/plugins/libflashplayer.so")

 would make the flashplyer installed in that location the preferred one to use.

 In case the path is not valid, we just go ahead and search for the first match
 given the mime-type.
Author: Alexander Sack <asac@ubuntu.com>
Forwarded: no

--- a/dom/plugins/base/nsPluginHost.cpp
+++ b/dom/plugins/base/nsPluginHost.cpp
@@ -1647,6 +1647,40 @@ nsPluginHost::FindPluginForType(const ch
 
   LoadPlugins();
 
+  nsCOMPtr<nsIPrefBranch> pref (do_QueryInterface(mPrefService));
+
+  char *preferredPluginPath = NULL;
+  nsCAutoString mimetypePrefString ("modules.plugins.mimetype.");
+  mimetypePrefString.Append(aMimeType);
+  // FIXME: preferredPluginPath is leaked. Ouch
+  nsresult rv = pref->GetCharPref(mimetypePrefString.get(), &preferredPluginPath);
+
+  if(NS_SUCCEEDED(rv) && preferredPluginPath) {
+    // FIXME: This should really check if the selected plugin can handle
+    //        the specified mimetype and that it is enabled, and just reject the
+    //        pref if not
+    nsPluginTag *plugins = mPlugins;
+    while (plugins) {
+      if (0 == PL_strcasecmp(plugins->mFileName.get(), preferredPluginPath) ||
+          0 == PL_strcasecmp(plugins->mFullPath.get(), preferredPluginPath)) {
+        return plugins;
+      }
+      plugins = plugins->mNext;
+    }
+
+    // now lets search for substrings
+    plugins=mPlugins;
+    while (plugins) {
+      if (nsnull != PL_strstr(plugins->mFileName.get(), preferredPluginPath) ||
+          nsnull != PL_strstr(plugins->mFullPath.get(), preferredPluginPath)) {
+        return plugins;
+      }
+      plugins = plugins->mNext;
+    }
+  }
+
+  // if there is no pref for this mime-type, or if the plugin named in pref
+  // isn't found, we pick the first that matches for this mime-type
   nsPluginTag *plugin = mPlugins;
   while (plugin) {
     if (!aCheckEnabled || plugin->IsEnabled()) {
